package steps;
import static org.testng.Assert.expectThrows;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.bouncycastle.oer.its.ieee1609dot2.basetypes.Duration;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import Hooks.hook;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import cucumber.api.java.en.And;
import cucumber.api.java.en.But;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class PeopleNearYou {
	
	public WebDriver driver = hook.driver;
	
	logindetails login=new logindetails();
	
	@Then("login the account")
	public void loginTheAccount() throws Throwable {
	  
		login.logindetailTwo();
		

	}

	// Apply filter scenario 
	
	@Given("user click the filter icon")
	public void userClickTheFilterIcon() {
		
		driver.findElement(By.xpath("(//div[@class='backGlow']//div)[3]")).click();
	}

	@Then("user click the gender as men")
	public void userClickTheGenderAsMen() {
		
		driver.findElement(By.id("mensel")).click();

	}

	@Then("user unselected dating site option")
	public void userUnselectedDatingSiteOption() {
		
		driver.findElement(By.xpath("(//img[@class='navigation--active'])[3]")).click();

	}

	@Then("user choose age as 50")
	public void userChooseAgeAs() {
	   
		WebElement Slider = driver.findElement(By.xpath("(//div[@class='input-range'])[1]"));
        Actions actions = new Actions(driver);

        // Drag the minimum slider to the right
        actions.dragAndDropBy(Slider, 50, 0).perform();
	}

	@Then("user choose distance as 50")
	public void userChooseDistanceAs() {
		
		WebElement Slider = driver.findElement(By.xpath("(//div[@class='input-range'])[2]"));
        Actions actions = new Actions(driver);

        // Drag the minimum slider to the right
        actions.dragAndDropBy(Slider, 50, 0).perform();
		
	}

	@When("user click the save")
	public void userClickTheSave() {
		
		driver.findElement(By.xpath("//button[@type='button']")).click();
		
	}

	@Then("filter should be apply")
	public void filterShouldBeApply() throws Throwable {
	  
		Thread.sleep(3000);
		String currentURL = driver.getCurrentUrl();
		String expectedURL = "https://howzu.appkodes.in/web/app/PeopleNear";
		
	    Assert.assertTrue(currentURL.equals(expectedURL), "Filter apply scenario is failed");
	}
	
	// Purchase super like 

	@Given("user click the super like icon")
	public void userClickTheSuperLikeIcon() {
	  
		driver.findElement(By.xpath("//div[@title='Super like']")).click();

	}

	@And("user choose the second plan")
	public void userChooseTheSecondPlan() {
	  
		driver.findElement(By.xpath("(//div[@class='apd10 daysPrice'])[2]")).click();

	}

	@And("user click continue button")
	public void userClickContinueButton() {
	  
		driver.findElement(By.xpath("//div[@class='sidebarLastContent text-center']//button[1]")).click();

	}

	@And("user completed the payment for super like")
	public void userCompletedThePaymentForSuperLike() throws Throwable {
		Thread.sleep(3000);
		WebElement iframeElement = driver.findElement(By.id("braintree-hosted-field-number"));
		// Switch to the iframe
		driver.switchTo().frame(iframeElement);	
		driver.findElement(By.id("credit-card-number")).sendKeys("4111111111111111");
		driver.switchTo().defaultContent();

		WebElement iframeElement1 = driver.findElement(By.id("braintree-hosted-field-expirationDate"));
		// Switch to the iframe
		driver.switchTo().frame(iframeElement1);			
		driver.findElement(By.id("expiration")).sendKeys("1226");
		
		driver.switchTo().defaultContent();
		driver.findElement(By.xpath("//button[normalize-space(text())='Buy']")).click();
		
	}

	@Then("super like should be purchased successfully")
	public void superLikeShouldBePurchasedSuccessfully() {
	  
		Boolean superlikeAlertMsg= driver.findElement(By.xpath("//div[@class='successMsg floatingAlerts1']")).isDisplayed();
		
		Assert.assertTrue(superlikeAlertMsg, "Super like scenario is failed");
	}
	
 // Share like , dislikes, super like to the users
	
@Given("user click the like icon")
public void userClickTheLikeIcon() {
			
			driver.findElement(By.xpath("//div[@title='Like']")).click();
			
		}

@When("user click the dislike icon")
		public void userClickTheDislikeIcon() {
		 
			driver.findElement(By.xpath("//button[@title='Dislike']")).click();

		}

@When("user share the superlike")
public void userShareTheSuperLike() {
 
	driver.findElement(By.xpath("//div[@title='Super like']")).click();

}

}
